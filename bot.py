import logging, requests, random
from gtts import gTTS
from textblob import TextBlob
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CallbackQueryHandler
from telegram.ext import RegexHandler, Filters, CommandHandler, MessageHandler, ConversationHandler


gen_key, weather_key, tts_key, phr_key, calc_key = range(5)


def create_log():
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                        level=logging.INFO)


def set_updaters(dispatcher):
    # –°—Ç–∞—Ä—Ç
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(MessageHandler(Filters.regex("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"), start))
    dispatcher.add_handler(MessageHandler(Filters.regex("–û —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö"), about))
    dispatcher.add_handler(ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π'), gen1),
            MessageHandler(Filters.regex('–ü–æ–≥–æ–¥–∞'), weather1),
            MessageHandler(Filters.regex('–û–∑–≤—É—á–∫–∞ –≥–æ–ª–æ—Å–æ–º'), tts1),
            MessageHandler(Filters.regex('–ê–Ω–µ–∫–¥–æ—Ç—ã'), phrases1),
            MessageHandler(Filters.regex('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'), calc1)

            ],
        states={
            gen_key: [MessageHandler(Filters.text, gen2)],
            weather_key: [MessageHandler(Filters.location, weather2)],
            tts_key: [MessageHandler(Filters.text, tts2)],
            calc_key: [MessageHandler(Filters.text, calc2)]
        },
        fallbacks=[CommandHandler('start', start)]
    ))


def main():
    create_log()
    updater = Updater(token= "")
    dispatcher = updater.dispatcher
    set_updaters(dispatcher)
    updater.start_polling()


def start(update, context):
    custom_keyboard = [["–ê–Ω–µ–∫–¥–æ—Ç—ã", "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–û–∑–≤—É—á–∫–∞ –≥–æ–ª–æ—Å–æ–º"], ["–ü–æ–≥–æ–¥–∞", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π"], ["–û —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö"]]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard, resize_keyboard=True)
    text = "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
    update.message.reply_text(text=text, reply_markup=reply_markup)
    return ConversationHandler.END


def gen1(update, context):
    update.message.reply_text(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–∞—Ä–æ–ª–µ")
    return gen_key


def gen2(update, context):
    kol = update.message.text
    if kol.isdigit() and int(kol) <= 64:
        pwd = random.sample(' 1234567890abcdefghigklmnopqrstuvyxwzABCDEFGHIGKLMNOPQRSTUVYXWZ!@#$%^&*()!@#$%^&*()', int(kol))
        update.message.reply_text(text="".join(pwd))
    else:
        update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É)")
    start(update, context)
    return ConversationHandler.END


def weather1(update, context):
    update.message.reply_text(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
    return weather_key


def weather2(update, context):
    txt = update.message
    lat = txt.location.latitude
    lon = txt.location.longitude
    api_key = ""
    request = requests.get(
        f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api_key}&units=metric&lang=ru")
    response = request.json()

    city = response["name"]
    temperature_now = response["main"]["temp"]
    wind_speed = response["wind"]["speed"]
    weather_description = response["weather"][0]["description"]
    update.message.reply_text(f"–í–∞—à –≥–æ—Ä–æ–¥: {city},\n"
                              f"–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å: {temperature_now}¬∞C, {weather_description},\n"
                              f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üå¨: {wind_speed} –º/c")

    #update.message.reply_text("–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ üòî")
    return ConversationHandler.END


def phrases1(update, context):
    with open('anek.txt', 'r') as f:
        a = f.read().split('???')
    text = random.choice(a)
    update.message.reply_text(text=text)


def tts1(update, context):
    update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç")
    return tts_key


def tts2(update, context):
    txt = update.message.text
    from gtts import gTTS

    def detect_language(text):
        from langdetect import DetectorFactory, detect, detect_langs
        return detect(text)

    myobj = gTTS(text=txt, lang=detect_language(txt), slow=False)
    myobj.save("audio.mp3")
    context.bot.send_audio(chat_id=update.message.from_user.id, audio=open("audio.mp3", "rb"))
    return ConversationHandler.END


def calc1(update, context):
    update.message.reply_text(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ +, -, /, *, (, ).")
    return calc_key


def calc2(update, context):
    update.message.reply_text(text=eval(update.message.text))
    return ConversationHandler.END


def about(update, context):
    update.message.reply_text(text="–û —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö, –Ω–∞–¥–æ –¥–æ–ø–∏—Å–∞—Ç—å –∫—Ä—á")


if __name__ == '__main__':
    main()

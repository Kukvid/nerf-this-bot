import logging, requests, random
import datetime, parser
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CallbackQueryHandler
from telegram.ext import RegexHandler, Filters, CommandHandler, MessageHandler, ConversationHandler


gen_key, weather_key, tts_key, phr_key, calc_key, short_key, date_key = range(7)


def create_log():
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                        level=logging.INFO)


def set_updaters(dispatcher):
    # –°—Ç–∞—Ä—Ç
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(MessageHandler(Filters.regex("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"), start))
    dispatcher.add_handler(MessageHandler(Filters.regex('–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫?'), date))
    dispatcher.add_handler(MessageHandler(Filters.regex('–ê–Ω–µ–∫–¥–æ—Ç'), phrases1))
    dispatcher.add_handler(ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π'), gen1),
            MessageHandler(Filters.regex('–ü–æ–≥–æ–¥–∞'), weather1),
            MessageHandler(Filters.regex('–û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞'), tts1),
            MessageHandler(Filters.regex('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'), calc1),
            MessageHandler(Filters.regex('–°–æ–∫—Ä–∞—â–∞—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫'), short1),
            ],
        states={
            gen_key: [MessageHandler(Filters.text, gen2)],
            weather_key: [MessageHandler(Filters.location, weather2)],
            tts_key: [MessageHandler(Filters.text, tts2)],
            calc_key: [MessageHandler(Filters.text, calc2)],
            short_key: [MessageHandler(Filters.text, short2)]
        },
        fallbacks=[CommandHandler('start', start)]
    ))


def main():
    create_log()
    updater = Updater(token="780079984:AAFIhcpr_2Av6s2UROl61wsrtEMlvrM_SRc")
    dispatcher = updater.dispatcher
    set_updaters(dispatcher)
    updater.start_polling()


def start(update, context):
    custom_keyboard = [["–ê–Ω–µ–∫–¥–æ—Ç—ã", "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞"],
                       ["–ü–æ–≥–æ–¥–∞", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π"],
                       ["–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫?", "–°–æ–∫—Ä–∞—â–∞—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫"],]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard, resize_keyboard=True)
    text = "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
    update.message.reply_text(text=text, reply_markup=reply_markup)
    return ConversationHandler.END


def gen1(update, context):
    update.message.reply_text(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–∞—Ä–æ–ª–µ")
    return gen_key


def gen2(update, context):
    kol = update.message.text
    if kol.isdigit() and int(kol) <= 64:
        pwd = random.sample(' 1234567890abcdefghigklmnopqrstuvyxwzABCDEFGHIGKLMNOPQRSTUVYXWZ!@#$%^&*()!@#$%^&*()', int(kol))
        update.message.reply_text(text="".join(pwd))
    else:
        update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É)")
    start(update, context)
    return ConversationHandler.END


def weather1(update, context):
    update.message.reply_text(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
    return weather_key


def weather2(update, context):
    txt = update.message
    lat = txt.location.latitude
    lon = txt.location.longitude
    api_key = "51da59c2ccbfe6d8cc883f5a686593ed"
    request = requests.get(
        f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api_key}&units=metric&lang=ru")
    response = request.json()

    city = response["name"]
    temperature_now = response["main"]["temp"]
    wind_speed = response["wind"]["speed"]
    weather_description = response["weather"][0]["description"]
    update.message.reply_text(f"–í–∞—à –≥–æ—Ä–æ–¥: {city},\n"
                              f"–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å: {temperature_now}¬∞C, {weather_description},\n"
                              f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üå¨: {wind_speed} –º/c")

    #update.message.reply_text("–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ üòî")
    return ConversationHandler.END


def phrases1(update, context):
    with open('anek.txt', 'r') as f:
        a = f.read().split('???')
    text = random.choice(a)
    update.message.reply_text(text=text)


def tts1(update, context):
    update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç")
    return tts_key


def tts2(update, context):
    txt = update.message.text
    from gtts import gTTS

    def detect_language(text):
        from langdetect import detect
        return detect(text)

    myobj = gTTS(text=txt, lang=detect_language(txt), slow=False)
    myobj.save("audio.mp3")
    context.bot.send_audio(chat_id=update.message.from_user.id, audio=open("audio.mp3", "rb"))
    return ConversationHandler.END


def calc1(update, context):
    update.message.reply_text(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ +, -, /, *, (, ).")
    return calc_key


def calc2(update, context):
    update.message.reply_text(text=eval(update.message.text))
    return ConversationHandler.END


def about(update, context):
    update.message.reply_text(text="–û —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö, –Ω–∞–¥–æ –¥–æ–ø–∏—Å–∞—Ç—å –∫—Ä—á")


def short1(update, context):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'https://–≤–∞—à–∞-—Å—Å—ã–ª–∫–∞.–¥–æ–º–µ–Ω'.")
    return short_key


def short2(update, context):
    url = update.message.text
    api_key = "1aca0dd0-1914-450b-b500-feb4da35d192"
    data = {"url": url, "api_key": api_key}
    request = requests.post("https://api.hm.ru/key/url/shorten", json=data)
    r = request.json()
    update.message.reply_text(r["data"]["short_url"])
    return ConversationHandler.END


def date(update, context):
    dic = parser.dic
    conv = ["", "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è",
            "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
    day = datetime.date.today().day
    month = conv[datetime.date.today().month]
    data = list(dic[f"{day} {month}"])
    s = ""
    for i in data:
        s += f"‚Ä¢ {i}\n"
    update.message.reply_text(f"–°–µ–≥–æ–¥–Ω—è {day} {month}\n{s}")


if __name__ == '__main__':
    main()
